#!/usr/bin/env node

/**
 * Auto Compliance System - Generated by AI Compliance Installer
 * Automatically runs compliance checks and monitors for violations
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

class AutoComplianceSystem {
  constructor() {
    this.projectRoot = process.cwd();
    this.complianceChecker = path.join(this.projectRoot, '.ai-compliance-functions/ai-compliance-checker.js');
    this.trackingSystem = path.join(this.projectRoot, 'ai-tracking-system.json');
    this.isRunning = false;
  }

  async start() {
    if (this.isRunning) {
      console.log('🔄 Auto compliance system already running');
      return;
    }

    this.isRunning = true;
    console.log('🚀 Starting Auto Compliance System...');

    await this.runComplianceCheck();
    this.setupFileWatchers();
    this.setupPeriodicChecks();

    console.log('✅ Auto Compliance System started successfully');
  }

  async runComplianceCheck() {
    return new Promise((resolve, reject) => {
      exec(`node ${this.complianceChecker}`, (error, stdout, stderr) => {
        if (error) {
          console.error('❌ Compliance check failed:', error);
          reject(error);
        } else {
          console.log('✅ Compliance check completed');
          resolve(stdout);
        }
      });
    });
  }

  setupFileWatchers() {
    const watchPaths = [
      'src/',
      'function-registry.json',
      'progress-log.json',
      'ai-tracking-system.json',
      '.ai-rules-docs/'
    ];

    watchPaths.forEach(watchPath => {
      const fullPath = path.join(this.projectRoot, watchPath);
      if (fs.existsSync(fullPath)) {
        fs.watch(fullPath, { recursive: true }, (eventType, filename) => {
          if (filename && !filename.includes('node_modules') && !filename.includes('.git')) {
            console.log(`📁 File changed: ${filename}`);
            this.runComplianceCheck();
          }
        });
        console.log(`👀 Watching: ${watchPath}`);
      }
    });
  }

  setupPeriodicChecks() {
    setInterval(() => {
      console.log('⏰ Running periodic compliance check...');
      this.runComplianceCheck();
    }, 5 * 60 * 1000);

    setInterval(() => {
      this.updateTrackingSystem();
    }, 60 * 1000);
  }

  updateTrackingSystem() {
    try {
      if (fs.existsSync(this.trackingSystem)) {
        const tracking = JSON.parse(fs.readFileSync(this.trackingSystem, 'utf8'));
        tracking.system_info.last_updated = new Date().toISOString();
        tracking.current_session.last_compliance_check = new Date().toISOString();
        fs.writeFileSync(this.trackingSystem, JSON.stringify(tracking, null, 2));
      }
    } catch (error) {
      console.error('❌ Failed to update tracking system:', error);
    }
  }

  stop() {
    this.isRunning = false;
    console.log('🛑 Auto Compliance System stopped');
  }
}

if (require.main === module) {
  const autoCompliance = new AutoComplianceSystem();
  autoCompliance.start();

  process.on('SIGINT', () => {
    console.log('\n🛑 Shutting down Auto Compliance System...');
    autoCompliance.stop();
    process.exit(0);
  });
}

module.exports = AutoComplianceSystem;
